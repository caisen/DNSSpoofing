######################################## CSE 508 Network Security (Homework 4) ############################################

Files Used for this assignment.

- Makefile: This file will be used to compile all required files and it will generate executables.

- hostfile: This file contains list of host and ip addresses which will be used in dns injection. Hostnames will be scanned
	    for injection and that particular IP will be sent back as a fake response.

- dnsinjection.c: This file contains code that will perform dns injection. It will create a fake resposne and send it to the
		  network using RAW socket.

- dnsdetect.c: This file contains code that will detect any attempt to spoof dns responses. It can either search in pcap file
		or can listen to interface for detection.

- Utils.c: This file contains utility functions that supports dns injection.

- Util_detection.c: This file contains utility functions that supports dns detection.

- def.h: This file contains defination of all required structures.

- harsh_inject_success.pcapng: This pcap file contains all dns queries. It also contains successful spoofed responses.
				It has three types of results in it.
				1) Spoofed response for "amazon.com" whose actual reply gives more than one IP address in answer.
				2) Spoofed response for "www.stonybrook.com" and "web.whatsapp.com" which contains CNAME in reponse
				   in actual reply.
				3) Last type is normal reply with only one IP address in response without CNAME.
				
(NOTE: This pcap file is generated by injection code itself and targeted host names are choosem such that it contains all variety
	of responses as mentioned above.)

###############################################################################################################################

Approach used for this assignment:

1) DNS injection:

	For dns injection, this code will listen to interface (if not provided it will listen to default interface) and scan for 
	DNS packets. Once it detect the DNS request then it will look for hostname and if hostfile is provided then it will match hostname 		within that file and if file is not provided then it will skip hostname matching. Then, it will swap source and destination ip 		addresses in ip header and ports in udp header. It will create a fake response with provided ip in hostfile (If hostfile is 
	not provided then it will find ip associated with selected interface) and send it to network. As the packet headers are created by the 		code, newly generated packet will be sent using RAW socket so that kernel will not add its own headers. Socket option is set to 	indicate the same.

2) DNS detection:

	For detecting DNS spoofing attempts, this code will keep track of all incoming responses. It will store DNS replies for each 		transaction ID. If it gets two responses for same transaction ID then it is a clear indication that someone is trying to spoof DNS 		responses. (Here it is assumed that DNS is using UDP only so for each request DNS server will reply only once) On first response, this 		code will keep track of hostname, ALL ip addresses in dns answer and transaction ID. Whenever it get second response for same 		transaction ID it will get all answer IPs and print the details about both answers on the terminal.

##################################################################################################################################

How to run this code?

0) Setup Info: This code is tested with two VMs (both on VMware workstation player). One is acting as aattacker and one as a victim.

On attacker's machine:

1) You need to install 'libpcap' if not already installed on attacker's machine.
2) Do 'make' command in folder where you have extracted this tar file.
3) Above step will generate two executables namely- 'dnsinject' and 'dnsdetect'
4) For Injection:
	Run following command:
		sudo ./dnsinject -i eth0 -f hostfile
	(You can provide other available interface and BPF expression for specific traffic spoofing, Use '-h' option to get command usage help)
5) For Detection:
	Run following command:
		sudo ./dnsdetect -r tracefile
	(You can provide either interface or tracefile but not both.You can also provide BPF expression for detection of attacks to specific 		host, Use '-h' option to get command usage help)
6) Use 'make clean' to clean up the executables once done with execution.

On victim's machine:

1) Try to access website listed in hostfile (if provided while running injection code on attacker's machine) 
   (you can either run in browser or on terminal by using 'nslookup')

2) This code is tested using following command.

	"nslookup stonybrook.edu 8.8.8.8"

	This will give you fake IP as mentioned in hostfile (If hostfile in not given then it will reply with attacker's IP)

######################################################################################################################################

Sample Output:

1) DNS injection:

	Below is the sample DNS successful spoofing result. Actual response for www.stonybrook.edu is "129.49.2.176".

	harsh@ubuntu:~$ nslookup www.stonybrook.edu 8.8.8.8
	Server:		8.8.8.8
	Address:	8.8.8.8#53

	Non-authoritative answer:
	Name:	www.stonybrook.edu
	Address: 1.1.1.1

2) DNS detection:

Below is the DNS attack detected for "amazon.com".It lists answers got from each responses and also logs all response IPs.

###########################################################################
ALERT! DNS ATTACK DETECTED!
Time: Sat May  7 15:36:35 2016
Transaction ID: 0x5d13 
Request: amazon.com
Answer 1:  104.199.134.235 
Answer 2:  54.239.26.128 54.239.25.192 54.239.25.208 54.239.17.6 54.239.17.7 54.239.25.200 
###########################################################################

####################################################################################################################################

NOTES:

1) Successful DNS spoof depends on speed of execution of program. When this code was tested it most of the time worked *with* local
   DNS only.But in case if it doesn't work please try running the code using some distant DNS server (i.e. nslookup stonybrook.edu
   8.8.8.8 (or) 8.8.4.4). It is working with distant dns server every time.

2) For injection, if number of entries in given hostfile is large then it will take time to scan for paticular hostname and it might
   be possible that spoofed packet will get delay. That's why for successful execution, number of entries in hostfile is limited to 20
   entries. (Code is not tested with more than these many entries, it may work for more than 20)

3) For detection, number of dns packet scanned per execution is restricted due to need of storing all IPs, transaction ID and hostnames.
   Right now it is supporting 200 *DNS* packets scanning for detection. (Code is not tested with more than these many entries, it may work)

######################################################################################################################################

References:

- RAW Sockets in c: http://www.tenouk.com/Module43a.html
- DNS packet reading: http://www.binarytides.com/dns-query-code-in-c-with-linux-sockets/
